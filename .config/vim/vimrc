" set leader key to space
let mapleader = " "

" skip defaults settings
let skip_defaults_vim=1

" set nocompatible to Vi
set nocompatible

" enable syntax highlighting
syntax enable
filetype plugin on

" set 8 bit color and light background for default colorscheme
"set t_Co=8
"set background=light

" set numbers and relative numbers on
set number
set relativenumber

" show the commands normal, insert ...etc
" by default it is on, but I want to be explicit
set showmode

" show the cursor position
set ruler

" minimal number of screen lines to keep above and below the cursor.
set scrolloff=10

" copy indent from current line when starting a new line
set autoindent
set smartindent " should be on with autoindent

" set tab settigs
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab " when on, a <Tab> in front of a line inserts blanks according to

" nice looking list chars
"set listchars=tab:→\ ,eol:↲,space:␣

" do not wrap the text
set nowrap

" no backups
set nobackup
set noswapfile
set nowritebackup

" highlight search
set hlsearch
set incsearch  " highlight matched words while typing
set ignorecase " ignore case when searching

" set the colored column on the right
set colorcolumn=74
set textwidth=72

" buffer becomes hidden when it is |abandon|ed.
set hidden

" be quet, do not make noise
set noerrorbells

" allows copy from vim
set clipboard+=unnamedplus

" enable omni-completion
set omnifunc=syntaxcomplete#Complete

" set menu completion
set wildmenu

" set concealing
set conceallevel=2

" be faster
set updatetime=100

" PLUGINS
" load plugins only if vim plug installed
if filereadable(expand("~/.vim/autoload/plug.vim"))

  call plug#begin('~/.vimplugins')
    Plug 'sheerun/vim-polyglot'
    "Plug 'pangloss/vim-javascript'
    Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
    Plug 'tpope/vim-fugitive'
    Plug 'airblade/vim-gitgutter'
    Plug 'morhetz/gruvbox'
    Plug 'aditya-azad/candle-grey'
    Plug 'itchyny/lightline.vim'

    Plug 'neoclide/coc.nvim', {'branch': 'release'}

    "fuzzy search
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
  call plug#end()

  " colorscheme settings

  set background=dark
  set t_Co=256 " enable colors in terminal
  colorscheme gruvbox

  set laststatus=2 " show lightline
  set noshowmode   " hide default mode (e.g.: insert/visual)
  set listchars=tab:→\ ,space:·,nbsp:␣,trail:•,eol:¶,precedes:«,extends:»

  " coc-settings
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Symbol renaming.
  nmap <leader>rn <Plug>(coc-rename)

  " Formatting selected code.
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'gitbranch': 'FugitiveHead'
        \ },
        \ }

  "highlight ColorColumn ctermfg=NONE ctermbg=236
  "highlight LineNr guifg=#5eacd3
  highlight SignColumn guibg=NONE ctermbg=0

	" base default color changes (gruvbox dark friendly)
  highlight Normal guibg=NONE ctermbg=0
  hi Special ctermfg=cyan guifg=cyan
  hi SpecialKey ctermfg=black ctermbg=NONE
  hi NonText ctermfg=black ctermbg=NONE
  hi vimGlobal ctermfg=black ctermbg=NONE
  hi ErrorMsg ctermbg=234 ctermfg=darkred cterm=NONE
  hi Error ctermbg=234 ctermfg=darkred cterm=NONE
  hi SpellBad ctermbg=234 ctermfg=darkred cterm=NONE
  hi SpellRare ctermbg=234 ctermfg=darkred cterm=NONE
  hi Search ctermbg=236 ctermfg=darkred
  hi vimTodo ctermbg=236 ctermfg=darkred
  hi Todo ctermbg=236 ctermfg=darkred
  hi IncSearch ctermbg=236 cterm=NONE ctermfg=darkred
  hi MatchParen ctermbg=236 ctermfg=darkred
"change color of spaces/tabs/etc
  hi SpecialKey ctermfg=66 guifg=#649A9A

  au FileType markdown,pandoc hi Title ctermfg=yellow ctermbg=NONE
  au FileType markdown,pandoc hi Operator ctermfg=yellow ctermbg=NONE

  " column for showing modified lines
  " for gitgutter plugin
  set signcolumn=yes
  " the background colours to match the sign column
  let g:gitgutter_set_sign_backgrounds = 1

  " golang
  let g:go_fmt_fail_silently = 0
  let g:go_fmt_command = 'goimports'
  let g:go_fmt_autosave = 1
  let g:go_gopls_enabled = 1
  let g:go_auto_sameids = 0

  " popup window of fzf (center of the current window)
  let g:fzf_layout = { 'window': { 'width': 0.95, 'height': 0.9, 'relative': v:true } }

  command! -bang -nargs=? -complete=dir HFiles
    \ call fzf#vim#files(<q-args>, {'source': 'ag --hidden --skip-vcs-ignores -g ""'}, <bang>0)
else
  autocmd BufWrite *.go !gofmt -w % " backup if fatih fails
endif

highlight ColorColumn ctermfg=NONE ctermbg=236

" displays all the syntax rules for current position, useful
" when writing vimscript syntax plugins
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" Conceal ends of markdown `code` to just code
syn region mkdCode matchgroup=mkdDelimiter start=/\(\([^\\]\|^\)\\\)\@<!`/ end=/\(\([^\\]\|^\)\\\)\@<!`/ concealends
hi htmlItalic ctermfg=14 ctermbg=0 guifg=NONE guibg=NONE cterm=bold
hi htmlH1 ctermfg=cyan ctermbg=0 guifg=NONE guibg=NONE cterm=bold
hi mkdLink ctermfg=blue ctermbg=NONE cterm=underline

" move selected line / block of text in visual mode
" shift + k to move up
" shift + j to move down
xnoremap K :move '<-2<CR>gv-gv
xnoremap J :move '>+1<CR>gv-gv

" delete current buffer
nmap <C-x> :bd!<CR>
" move to the next buffer
nmap <tab> :bnext<CR>
" move to the previous buffer
nmap <s-tab> :bprev<CR>
" jump to the <++>
nnoremap <space><space> <esc>/<++><cr>"_c4l
" show syntax rule
nmap <F2> :call <SID>SynStack()<CR>
nmap <F3> :set list!<CR>
" open my vimrc fast
nnoremap <leader>vrc :e $VIMRC<CR>
" list buffers
nnoremap <leader>fb :buffers<CR>
" comment lines
nnoremap <leader>cmt :.!cmt<space>
" source vimrc
nmap <leader>rc :so $VIMRC<CR>
" hlsearch swap
nmap <leader>hl :nohlsearch!<CR>
" paste mode
nmap <leader>p :set paste!<CR>
" search with fzf
nmap <leader>ff :HFiles<CR>
" search with Ripgrep (requires Rg)
nmap <leader>rg :Find<CR>
" search with Ag (requires the silver search)
nmap <leader>ag :Ag<CR>
" copy to clipboard
vnoremap <silent><leader>yy :%w !xclip -i -sel cp<CR><CR>
nnoremap <silent><leader>cp :%w !xclip -i -sel cp<CR><CR>
nmap <silent><leader>pp :r !xclip -o -sel cp<CR>

autocmd FileType go nnoremap <leader>cmt :.!cmt<space>//<CR>
"autocmd FileType go nnoremap <leader>gd :GoDef<CR>
"autocmd FileType go nnoremap <leader>doc :GoDoc<CR>
"autocmd FileType go nnoremap <leader>gi :GoInfo<CR>
autocmd FileType vim nnoremap <leader>cmt :.!cmt<space>\"<CR>

" automatically deletes all trailing whitespace and newlines at end of
" file on save.
autocmd BufWritePre * %s/\s\+$//e
autocmd BufWritePre * %s/\n\+\%$//e

" search for term incuding hidden files
command! -bang -nargs=* Find call fzf#vim#grep('rg
      \ --column --line-number --no-heading
      \ --fixed-strings --ignore-case --no-ignore
      \ --hidden --follow --glob "!.git"
      \ --color "always" '.shellescape(<q-args>), 1, <bang>0)
